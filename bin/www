#!/usr/bin/env node

const https = require('https');
const fs = require('fs');
const path = require('path');
const app = require('../src/server');

const port = normalizePort(process.env.PORT || '3001');

app.set('port', port);

const server = https.createServer(getServerOpts(), app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// ------------------------------------------------------------------------------------------------ //

function normalizePort(port) {
  port = parseInt(port, 10);
  if (isNaN(port)) {
    return port;
  }

  return port >= 0 ? port : undefined;
}

function getServerOpts() {
  return {
    key: fs.readFileSync(path.resolve(__dirname, '../.cert/key.pem'), 'utf8'),
    cert: fs.readFileSync(path.resolve(__dirname, '../.cert/cert.pem'), 'utf8')
  };
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const address = server.address();
  const bind = typeof address === 'string' ? `pipe ${address}` : `port ${address.port}`;
  console.info(`Listening on ${bind}`);
}
